import warnings
warnings.filterwarnings('ignore')

import math
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import re
import scipy.stats as stats
import seaborn as sns
import sys
import time

from ast import literal_eval
from os import walk
from scipy.stats import spearmanr
from scipy.stats import pearsonr
from statsmodels.sandbox.stats import multicomp

# import utils
sys.path.append("../../../utils")
from plotting_utils import *

%matplotlib inline
%config InlineBackend.figure_format = 'svg'
mpl.rcParams['figure.autolayout'] = False

sns.set(**PAPER_PRESET)
fontsize = PAPER_FONTSIZE

data_f = "../../../data/02__screen/02__enrichment_data/SuppTable_S2.sgRNA_results.txt"

crisphie_f = "../../../data/02__screen/02__enrichment_data/SuppTable_S3.CRISPhieRmix_results.txt"

validation_data_f = "../../../data/02__screen/03__validation_data/validation_data.xlsx"

qpcr_dir = "../../../data/02__screen/03__validation_data/rt_qpcr_data"

data = pd.read_table(data_f, sep="\t")
#data["sgRNA_rank"] = data["sgRNA_rank"].astype(str)
data.head()

val_data = pd.read_excel(validation_data_f)
print(len(val_data))
val_data.head()

crisphie = pd.read_table(crisphie_f, sep="\t")
print(len(crisphie))
crisphie.head()

files = []
for (dirpath, dirnames, filenames) in walk(qpcr_dir):
    files.extend(filenames)
    break
print(len(files))
files

data_sub = data[["sgRNA", "sgRNA_l2fc", "tss_id"]]

val_data = val_data.merge(data_sub, left_on="guide_sequence", right_on="sgRNA", how="left")

val_data = val_data.merge(crisphie[["group_id", "transcript_biotype_status", "hit_status"]], 
                          left_on="tss_id", right_on="group_id", how="left")
val_data.drop(["sgRNA", "group_id"], axis=1, inplace=True)
val_data

val_data["guide_undiff_enrich"] = val_data["guide_undiff"]/val_data["guide_diff"]
val_data["scram_undiff_enrich"] = val_data["scram_undiff"]/val_data["scram_diff"]
val_data["val_score"] = np.log2(val_data["guide_undiff_enrich"]/val_data["scram_undiff_enrich"])
val_data.sort_values(by="sgRNA_l2fc", ascending=False)

fig = plt.figure(figsize=(2, 2))
ax = sns.regplot(data=val_data, x="sgRNA_l2fc", y="val_score", color="black")

hits = val_data[val_data["hit_status"] == "hit"]
nonhits = val_data[val_data["hit_status"] == "no hit"]

pc_hits = hits[hits["transcript_biotype_status"] == "protein_coding"]
pc_nonhits = nonhits[nonhits["transcript_biotype_status"] == "protein_coding"]

lnc_hits = hits[hits["transcript_biotype_status"] != "protein_coding"]
lnc_nonhits = nonhits[nonhits["transcript_biotype_status"] != "protein_coding"]

ax.scatter(pc_hits["sgRNA_l2fc"], pc_hits["val_score"], color=sns.color_palette()[2], zorder=11,
           edgecolors="black", linewidth=0.5)
ax.scatter(pc_nonhits["sgRNA_l2fc"], pc_nonhits["val_score"], color="white", 
           edgecolors=sns.color_palette()[2], linewidth=0.5, zorder=11)

ax.scatter(lnc_hits["sgRNA_l2fc"], lnc_hits["val_score"], color="black", zorder=11)
ax.scatter(lnc_nonhits["sgRNA_l2fc"], lnc_nonhits["val_score"], color="white", 
           edgecolors="black", linewidth=0.5, zorder=11)

ax.set_xlabel("screen sgRNA enrichment score")
ax.set_ylabel("validation sgRNA enrichment score")

no_nan = val_data[~pd.isnull(val_data["sgRNA_l2fc"])]
r, p = stats.spearmanr(no_nan["sgRNA_l2fc"], no_nan["val_score"])
ax.text(0.05, 0.95, "r = %s\np = %s\nn= %s" % ((round(r, 2), round(p, 4), len(no_nan))), 
        ha="left", va="top", fontsize=fontsize,
        transform=ax.transAxes)

fig.savefig("Fig4A.pdf", dpi="figure", bbox_inches="tight")

val_data[val_data["gene_name"] == "RP11-222K16.2"][["guide_num", "guide_sequence", "sgRNA_l2fc", "val_score"]]

def row_type(row):
    if "scrm" in row["variable"]:
        return "scramble"
    else:
        return "sgRNA"

qpcr_dict = {}

for f in files:
    n = f.split("__")[0]
    sgrna = f.split("__")[2].split(".")[0]
    df = pd.read_table("%s/%s" % (qpcr_dir, f))
    df.columns = ["gene", "scrm_val", "scrm_yerr1", "scrm_yerr2", "sgrna_val", "sgrna_yerr1", "sgrna_yerr2"]
    melt = pd.melt(df, id_vars=["gene"])
    melt["type"] = melt.apply(row_type, axis=1)
    qpcr_dict["%s__%s" % (n.upper(), sgrna)] = melt

qpcr_dict["SOX17__1"]

genes = ["SOX17", "EOMES", "RP11-120D5.1", "RP11-222K16.2"]
plot_df = pd.DataFrame()

for key in qpcr_dict:
    gene = key.split("__")[0]
    if gene in genes:
        df = qpcr_dict[key]
        df["info"] = key
        plot_df = plot_df.append(df)

vals = plot_df[plot_df["variable"].str.contains("val")]
yerrs = plot_df[plot_df["variable"].str.contains("yerr1")]
print(len(vals))
print(len(yerrs))

order = ["SOX17__1", "SOX17__4", "EOMES__1", "EOMES__10"]
pal = {"scrm_val": "darkgray", "sgrna_val": sns.color_palette()[2]}

fig = plt.figure(figsize=(2.5, 2))

ax = sns.barplot(data=vals, x="info", y="value", hue="variable", order=order, palette=pal)
ax.set_xlabel("")
ax.set_ylabel("fold change")
ax.get_legend().remove()
ax.set_ylim((0, 1.5))
ax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])

# plot errors
xs = [-0.2, 0.2, 0.8, 1.2, 1.8, 2.2, 2.8, 3.2]
c = 0
for i, x in enumerate(xs):
    if i % 2 == 0:
        name = order[c]
        c += 1
    subvals = vals[vals["info"] == name]
    subyerrs = yerrs[yerrs["info"] == name]
    if i % 2 == 0: #scrambled sgRNA
        val_ = subvals[subvals["type"] == "scramble"]["value"].iloc[0]
        yerr_ = subyerrs[subyerrs["type"] == "scramble"]["value"].iloc[0]
    else:
        val_ = subvals[subvals["type"] == "sgRNA"]["value"].iloc[0]
        yerr_ = subyerrs[subyerrs["type"] == "sgRNA"]["value"].iloc[0]
    ax.plot([x, x], [val_ - yerr_, val_ + yerr_], color="black")
    ax.plot([x-0.1, x+0.1], [val_ - yerr_, val_ - yerr_], color="black")
    ax.plot([x-0.1, x+0.1], [val_ + yerr_, val_ + yerr_], color="black")
    
fig.savefig("Fig4X1.pdf", dpi="figure", bbox_inches="tight")

order = ["RP11-120D5.1__1", "RP11-120D5.1__2", "RP11-222K16.2__3", "RP11-222K16.2__9"]
pal = {"scrm_val": "darkgray", "sgrna_val": "dimgray"}

fig = plt.figure(figsize=(2.5, 2))

ax = sns.barplot(data=vals, x="info", y="value", hue="variable", order=order, palette=pal)
ax.set_xlabel("")
ax.set_ylabel("fold change")
ax.get_legend().remove()
ax.set_ylim((0, 1.5))
ax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])

# plot errors
xs = [-0.2, 0.2, 0.8, 1.2, 1.8, 2.2, 2.8, 3.2]
c = 0
for i, x in enumerate(xs):
    if i % 2 == 0:
        name = order[c]
        c += 1
    subvals = vals[vals["info"] == name]
    subyerrs = yerrs[yerrs["info"] == name]
    if i % 2 == 0: #scrambled sgRNA
        val_ = subvals[subvals["type"] == "scramble"]["value"].iloc[0]
        yerr_ = subyerrs[subyerrs["type"] == "scramble"]["value"].iloc[0]
    else:
        val_ = subvals[subvals["type"] == "sgRNA"]["value"].iloc[0]
        yerr_ = subyerrs[subyerrs["type"] == "sgRNA"]["value"].iloc[0]
    ax.plot([x, x], [val_ - yerr_, val_ + yerr_], color="black")
    ax.plot([x-0.1, x+0.1], [val_ - yerr_, val_ - yerr_], color="black")
    ax.plot([x-0.1, x+0.1], [val_ + yerr_, val_ + yerr_], color="black")
    
fig.savefig("Fig4X2.pdf", dpi="figure", bbox_inches="tight")

all_genes = list(val_data.gene_name.unique())
remaining_genes = [x for x in all_genes if x not in genes]
print(len(remaining_genes))
remaining_genes

rem_plot_df = pd.DataFrame()

for key in qpcr_dict:
    gene = key.split("__")[0]
    if gene in remaining_genes:
        df = qpcr_dict[key]
        df["info"] = key
        rem_plot_df = rem_plot_df.append(df)

vals = rem_plot_df[rem_plot_df["variable"].str.contains("val")]
yerrs = rem_plot_df[rem_plot_df["variable"].str.contains("yerr1")]
print(len(vals))
print(len(yerrs))

rem_plot_df["info"].unique()

order = ["FOXA2__1", "FOXA2__5", "GATA6__1", "GATA6__5"]
pal = {"scrm_val": "darkgray", "sgrna_val": sns.color_palette()[2]}

fig = plt.figure(figsize=(2.5, 2))

ax = sns.barplot(data=vals, x="info", y="value", hue="variable", order=order, palette=pal)
ax.set_xlabel("")
ax.set_ylabel("fold change")
ax.get_legend().remove()
ax.set_ylim((0, 1.5))
ax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])

# plot errors
xs = [-0.2, 0.2, 0.8, 1.2, 1.8, 2.2, 2.8, 3.2]
c = 0
for i, x in enumerate(xs):
    if i % 2 == 0:
        name = order[c]
        c += 1
    subvals = vals[vals["info"] == name]
    subyerrs = yerrs[yerrs["info"] == name]
    if i % 2 == 0: #scrambled sgRNA
        val_ = subvals[subvals["type"] == "scramble"]["value"].iloc[0]
        yerr_ = subyerrs[subyerrs["type"] == "scramble"]["value"].iloc[0]
    else:
        val_ = subvals[subvals["type"] == "sgRNA"]["value"].iloc[0]
        yerr_ = subyerrs[subyerrs["type"] == "sgRNA"]["value"].iloc[0]
    ax.plot([x, x], [val_ - yerr_, val_ + yerr_], color="black")
    ax.plot([x-0.1, x+0.1], [val_ - yerr_, val_ - yerr_], color="black")
    ax.plot([x-0.1, x+0.1], [val_ + yerr_, val_ + yerr_], color="black")
    
#fig.savefig("Fig4X2.pdf", dpi="figure", bbox_inches="tight")

order = ['ACVR2B-AS1__6', 'ACVR2B-AS1__8', 'DIGIT__8', 'KB-1440D3.14__9',
       'LINC00479__3', 'PVT1__1', 'PVT1__2', 'PVT1__6', 'PVT1__9',
       'RP11-23F23.2__6', 'RP3-508I15.9__1', 'RP3-508I15.9__2']
pal = {"scrm_val": "darkgray", "sgrna_val": "dimgray"}

fig = plt.figure(figsize=(7, 2))

ax = sns.barplot(data=vals, x="info", y="value", hue="variable", order=order, palette=pal)
ax.set_xlabel("")
ax.set_ylabel("fold change")
ax.get_legend().remove()
ax.set_ylim((0, 1.5))
ax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])

# plot errors
xs = [-0.2, 0.2, 0.8, 1.2, 1.8, 2.2, 2.8, 3.2, 3.8, 4.2, 4.8, 5.2, 5.8, 6.2, 6.8, 7.2, 7.8, 8.2, 8.8, 9.2,
      9.8, 10.2, 10.8, 11.2]
c = 0
for i, x in enumerate(xs):
    if i % 2 == 0:
        name = order[c]
        c += 1
    subvals = vals[vals["info"] == name]
    subyerrs = yerrs[yerrs["info"] == name]
    if i % 2 == 0: #scrambled sgRNA
        val_ = subvals[subvals["type"] == "scramble"]["value"].iloc[0]
        yerr_ = subyerrs[subyerrs["type"] == "scramble"]["value"].iloc[0]
    else:
        val_ = subvals[subvals["type"] == "sgRNA"]["value"].iloc[0]
        yerr_ = subyerrs[subyerrs["type"] == "sgRNA"]["value"].iloc[0]
    ax.plot([x, x], [val_ - yerr_, val_ + yerr_], color="black")
    ax.plot([x-0.1, x+0.1], [val_ - yerr_, val_ - yerr_], color="black")
    ax.plot([x-0.1, x+0.1], [val_ + yerr_, val_ + yerr_], color="black")
    
#fig.savefig("Fig4X2.pdf", dpi="figure", bbox_inches="tight")

tmp1 = plot_df[plot_df["variable"].isin(["scrm_val", "scrm_yerr1", 
                                         "sgrna_val", "sgrna_yerr1"])][["info", "variable", "value"]]
tmp1 = tmp1.pivot(index="info", columns="variable").reset_index()
tmp1

tmp2 = rem_plot_df[rem_plot_df["variable"].isin(["scrm_val", "scrm_yerr1", 
                                                 "sgrna_val", "sgrna_yerr1"])][["info", "variable", "value"]]
tmp2 = tmp2.pivot(index="info", columns="variable").reset_index()
tmp2

qpcr_df = tmp1.append(tmp2)
qpcr_df["gene_name"] = qpcr_df["info"].str.split("__", expand=True)[0]
qpcr_df["guide_num"] = qpcr_df["info"].str.split("__", expand=True)[1].astype(int)

val_data = val_data.merge(qpcr_df, how="left", on=["gene_name", "guide_num"])
val_data.head()

val_data.columns

val_data = val_data.iloc[:, [0, 1, 2, 8, 9, 3, 4, 5, 6, 10, 16, 13, 20, 21, 18, 19]]
val_data.columns = ["gene_name", "sgRNA_num", "sgRNA", "FACS_date", "RTqPCR_date", "sgRNA_FACS_pUndiff",
                    "scrambled_FACS_pUndiff", "sgRNA_FACS_pDiff", "scrambled_FACS_pDiff", "sgRNA_screen_l2fc",
                    "sgRNA_validation_score", "screen_hit_status", "sgRNA_RTqPCR_mean", "sgRNA_RTqPCR_error",
                    "scrambled_RTqPCR_mean", "scrambled_RTqPCR_error"]
val_data.head()

# update sgRNA numbers so they reflect what's in the corr plot
gene_order = ["SOX17", "EOMES", "RP11-120D5.1", "RP11-222K16.2", "FOXA2", "GATA6", 'ACVR2B-AS1', 'DIGIT', 
              'KB-1440D3.14', 'LINC00479', 'PVT1', 'RP11-23F23.2', 'RP3-508I15.9']
gene_order_df = pd.DataFrame(gene_order).reset_index()
gene_order_df.columns = ["rank", "gene_name"]
gene_order_df

val_data = val_data.merge(gene_order_df, on="gene_name")
val_data = val_data.sort_values(by=["rank", "sgRNA_num"], ascending=True)

# remove the 2 sgRNAs that weren't in the screen
val_data = val_data[~pd.isnull("screen_hit_status")]
val_data

val_data.to_csv("../../../data/02__screen/03__validation_data/SuppTable_S4.validation_results.txt", sep="\t",
               index=False)


